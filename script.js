dmodels = [512, 512, 512, 512, 512, 512, 512, 256, 512, 512, 256, 512, 512, 512, 512, 512, 512, 512, 512, 256, 512, 512, 512, 512, 512, 256, 256, 512, 256, 256, 512, 512, 512, 512, 512, 256, 256, 256, 256, 512, 512, 512, 512, 512, 512, 256, 256, 512, 256, 512, 512, 512,  64, 512, 512,  64, 512, 512, 512, 512, 256, 512, 512, 512, 512, 512, 256, 512, 512, 256, 512, 256, 512, 512,  64,  64, 256, 256, 512,  64, 512, 512, 256, 256, 256, 512,  64, 512,  64, 256, 512, 256, 512, 512, 512,  64, 512, 512, 512, 512, 512, 512, 256, 512, 512, 256, 512, 256, 512, 512, 256, 512, 256, 256, 512, 256, 512, 512, 256, 256, 512, 512, 512, 256, 512, 512, 512, 512, 512, 512, 512, 512, 512, 256, 512, 512, 512, 512, 256, 256, 256, 512, 512, 256, 512, 512,  64, 512, 512,  64, 256, 256, 256, 512, 256, 512, 512, 512, 512, 256, 512, 512, 256, 512, 256, 512, 512, 512, 512, 512, 256, 512, 256, 512, 512, 512, 512, 256, 512, 512, 512, 256, 256, 512, 512, 512, 256, 256, 512, 256, 512,  64, 512, 512, 256, 512, 256, 512, 512, 256, 512, 256, 512, 256, 512, 512, 256, 256, 512, 512,  64, 256, 256, 256, 512, 256, 256, 256, 512, 512, 512, 512, 256,  64, 512, 256, 512, 256, 256, 256, 512, 512, 512, 512, 512, 256,  64, 512, 512, 512, 256, 256, 512, 512, 512, 512, 512, 256, 512, 512, 512, 256, 512, 512, 512, 256, 256, 256, 512, 512, 256, 512, 512, 512, 512, 512, 512, 512, 512,  64, 512,  64, 256, 512, 512, 256, 512, 256, 512, 256, 512, 512, 256, 512, 512, 512, 512, 256,  64, 512, 256, 512, 512, 512, 512, 512, 512, 512, 256, 256, 256, 256,  64, 256, 512, 256, 512, 512,  64, 512, 512, 256, 512, 256, 512, 512,  64,  64, 512, 256, 512, 256, 256, 256, 512, 256, 256, 256, 256, 512, 512, 512, 512, 512, 512, 256, 256, 512, 512, 512, 512, 512, 256, 512, 512, 512, 256,  64, 512, 512, 256,  64, 512, 256,  64, 512,  64, 512, 512, 512, 512, 512, 256, 512, 512, 512, 512, 512, 256, 512, 512, 256,  64, 256, 512, 512, 256, 256, 256, 512, 256, 256, 512, 256,  64, 256, 256, 512,  64, 256, 512, 512, 512,  64, 512,  64, 256, 512, 512,  64, 512, 512, 512, 256, 256, 512, 512, 256, 256, 256, 512, 512, 512, 256, 512, 256,  64, 512, 512, 512, 256, 512, 256, 256, 512, 512, 512, 512, 256, 256, 256, 512, 256, 256, 512, 512, 256, 512, 512,  64,  64,  64, 512, 512, 512, 256, 256, 256, 512,  64,  64, 256, 512, 512, 256, 256, 512,  64, 256, 256, 512, 512, 512,  64, 256, 512, 512, 512, 512, 512, 256, 512, 256, 512, 512, 256, 512, 512, 512, 512,  64, 256, 256, 512, 512, 512, 512, 256, 512, 512, 256, 512, 512, 512, 256, 512, 512, 256, 512, 512, 512, 256, 256, 512,  64, 512, 512, 512, 512, 512, 256, 256, 512, 512, 512, 512, 512, 512, 512,  64, 256, 512, 512, 512, 512,  64, 256,  64, 256, 256, 512,  64, 256, 512, 256, 512, 512, 256, 256, 256, 512, 512, 512, 512, 256, 512, 256,  64, 512, 256, 256, 512, 512, 512, 512,  64, 512, 512,  64, 256, 512, 512,  64, 256, 512, 512, 512, 512, 512, 256, 512, 512, 512, 512, 256, 512, 512, 512, 512, 512, 512, 512, 256, 512, 256, 256, 512, 256, 512,  64, 512, 512,  64, 256, 512, 512, 512,  64, 512, 256, 512, 256, 256, 512, 512, 512,  64,  64, 512, 512, 256, 512, 256, 512, 256,  64,  64, 512, 512, 512, 512,  64, 512, 256, 512, 512, 512, 512, 256, 256, 512,  64, 512, 256, 512, 512, 512, 512,  64, 256, 512, 256, 512, 512, 256, 512, 512, 256, 512, 512, 256, 512, 512, 512, 512, 256, 256, 256, 512, 512,  64, 256, 512, 512, 512, 512, 512, 512, 256,  64, 256, 256,  64, 512, 256, 512, 256, 256, 512, 512, 512, 256,  64, 256, 512, 256, 512, 256, 256, 512, 512,  64, 512, 512, 512, 512, 256, 512, 256, 512, 512, 512, 512, 512, 512, 256, 512, 256,  64, 256, 512, 256, 256, 512, 256, 512, 512, 512, 512, 512, 512, 512, 512, 512,  64, 256, 512, 256, 512, 512,  64, 512, 256, 256, 512, 512,  64, 512, 256, 512, 256, 256, 512, 512, 512, 512, 256, 512, 256, 256, 256,  64, 512, 256, 256, 256, 256, 512,  64, 512, 512, 512, 256, 512, 512, 512, 512, 512,  64, 256, 512, 256, 256, 256, 256, 256,  64, 256,  64, 256, 512, 512,  64, 256, 512, 256,  64, 256, 256,  64, 256, 512, 256, 512, 512,  64, 512, 256,  64, 256, 256, 256, 512, 512,  64, 512, 512, 256, 512, 256, 256, 256, 512, 512, 256, 512, 512,  64, 256, 256, 256, 256,  64, 256, 256, 512, 512, 256, 256,  64, 512, 512, 512, 512, 512, 512, 256, 512, 512,  64, 256, 512, 512, 512, 256, 512,  64, 256, 512, 256,  64, 256, 256,  64,  64, 512, 512, 512, 512, 256, 512, 512, 256, 512, 512,  64, 512, 256, 256,  64,  64, 256, 512, 512, 512, 512, 256, 256, 512,  64, 512,  64, 512, 256, 256, 512, 512, 512,  64, 256, 512,  64, 512, 256, 512, 256, 256, 256, 512,  64,  64, 256, 256, 256, 256, 256, 512, 256, 256, 256, 256, 512, 256,  64, 512, 256, 256, 256, 256, 512, 256, 512, 512, 512, 256, 256, 256, 512, 512, 512, 256, 256, 256, 512, 256, 256, 512, 256, 512, 512, 256, 512,  64, 256, 512, 512, 512,  64, 256, 256, 512,  64, 512, 512, 512, 512,  64, 512, 512,  64, 256, 256, 256,  64, 256, 512, 256, 256,  64,  64,  64, 512, 256, 256,  64, 256, 512, 512, 512, 512, 256, 256,  64, 256,  64, 512, 256, 512, 256, 256,  64, 256, 512, 256,  64, 256, 512, 256, 512, 512, 512, 256, 256, 256, 256, 512,  64, 256, 512, 512, 256, 256,  64, 256, 512, 512, 256,  64,  64, 256,  64,  64, 256, 512,  64, 512, 512, 256,  64, 512, 512, 512, 256, 512, 256, 512,  64, 512, 512, 512, 256,  64,  64, 256, 512, 256,  64, 512, 256, 512, 512, 256, 512, 512, 512, 256, 256, 256, 512, 256, 512, 512,  64, 512, 512, 512, 512, 512, 256, 256, 512, 256, 512, 256, 512, 512, 256, 256, 256, 256, 256, 512, 512, 256, 512, 512, 512,  64, 512, 512, 256, 512, 256, 256, 512,  64, 512, 256, 512, 512, 256,  64,  64,  64,  64, 256, 512, 512,  64, 512, 256, 512, 512, 256, 512,  64, 256, 512,  64, 512, 256, 256, 512, 512, 256,  64, 512, 256, 256, 512, 512, 256, 512, 512, 256, 512, 512, 512, 512, 256, 512, 512, 512, 256, 256, 256, 512, 512, 512, 256, 256, 512,  64, 256,  64, 256, 256, 256, 256,  64, 512, 256, 256, 256, 256, 256, 256, 256, 512, 512, 256, 256, 512, 256, 512, 512, 512, 512, 256, 256, 256, 256, 256,  64, 256, 512, 256,  64,  64,  64, 512, 512,  64, 512,  64, 256, 256, 256,  64, 512, 512, 256, 512,  64, 512, 256, 256, 512, 512, 512, 256, 512, 512, 256, 512, 512,  64, 512, 512, 256, 256, 256, 512,  64, 512,  64, 512, 256, 512, 512,  64, 512,  64, 512, 256, 512, 512, 256, 512, 256,  64, 512, 512,  64, 512, 256, 256, 256, 512, 256, 512, 512, 256, 512, 256, 512, 256, 512, 256, 256, 512, 512, 512, 256, 512,  64,  64, 256,  64, 256, 256, 256, 512, 512, 256, 256, 512, 256, 512, 512, 512, 512,  64, 256, 512, 256, 256,  64, 256, 256, 512, 512, 256, 512, 512,  64, 512, 256, 512, 256, 512, 512, 512, 256, 256, 256, 512, 512, 256, 512, 512, 512, 512,  64, 512, 256, 512, 256, 512,  64, 512, 512,  64, 512, 512,  64, 512, 512, 512, 256, 512, 512, 256, 256];
dquarters = ["Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q2", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q2", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q2", "Q1", "Q1", "Q2", "Q2", "Q1", "Q1", "Q1", "Q1", "Q2", "Q1", "Q1", "Q1", "Q2", "Q2", "Q2", "Q2", "Q1", "Q1", "Q2", "Q1", "Q2", "Q1", "Q1", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q1", "Q2", "Q2", "Q1", "Q1", "Q1", "Q2", "Q2", "Q2", "Q1", "Q1", "Q1", "Q2", "Q2", "Q2", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q2", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q1", "Q1", "Q1", "Q1", "Q2", "Q1", "Q1", "Q2", "Q2", "Q1", "Q2", "Q2", "Q1", "Q1", "Q2", "Q1", "Q1", "Q1", "Q1", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q2", "Q1", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q1", "Q1", "Q1", "Q2", "Q1", "Q2", "Q1", "Q1", "Q1", "Q2", "Q1", "Q1", "Q1", "Q1", "Q1", "Q1", "Q2", "Q2", "Q1", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q1", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q1", "Q1", "Q1", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q1", "Q1", "Q1", "Q1", "Q2", "Q1", "Q2", "Q1", "Q1", "Q2", "Q2", "Q1", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q1", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q1", "Q1", "Q1", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q1", "Q1", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q1", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q1", "Q2", "Q1", "Q1", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q1", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q3", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q1", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q1", "Q2", "Q3", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q1", "Q2", "Q3", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q3", "Q3", "Q2", "Q3", "Q3", "Q1", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q2", "Q3", "Q3", "Q2", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q1", "Q2", "Q2", "Q3", "Q2", "Q2", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q1", "Q2", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q3", "Q3", "Q3", "Q1", "Q2", "Q2", "Q3", "Q3", "Q2", "Q2", "Q3", "Q3", "Q1", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q1", "Q2", "Q3", "Q2", "Q2", "Q1", "Q2", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q1", "Q2", "Q3", "Q2", "Q2", "Q2", "Q1", "Q2", "Q3", "Q3", "Q2", "Q2", "Q1", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q3", "Q3", "Q3", "Q1", "Q2", "Q3", "Q3", "Q3", "Q3", "Q3", "Q2", "Q2", "Q3", "Q3", "Q2", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q3", "Q3", "Q2", "Q1", "Q3", "Q2", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q3", "Q2", "Q3", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q2", "Q2", "Q3", "Q2", "Q3", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q1", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q2", "Q2", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q3", "Q2", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q2", "Q2", "Q2", "Q3", "Q2", "Q3", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q3", "Q2", "Q3", "Q3", "Q3", "Q2", "Q2", "Q3", "Q2", "Q3", "Q2", "Q2", "Q3", "Q2", "Q3", "Q3", "Q2", "Q2", "Q2", "Q3", "Q2", "Q3", "Q2", "Q2", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q2", "Q2", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q2", "Q2", "Q2", "Q3", "Q3", "Q2", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q2", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q3", "Q2", "Q3", "Q1", "Q3", "Q2", "Q2"];    
dtimes = [1626454813, 1626454813, 1626454813, 1626454813, 1626454813, 1626454813, 1626454813, 1626454813, 1626454813, 1626454813, 1626454813, 1626454814, 1626454814, 1626454814, 1626454815, 1626454815, 1626454816, 1626454818, 1626454822, 1626454823, 1626454823, 1626454823, 1626454825, 1626454825, 1626454826, 1626454826, 1626454827, 1626454830, 1626454830, 1626454830, 1626454833, 1626454835, 1626454835, 1626454835, 1626454836, 1626454837, 1626454837, 1626454838, 1626454838, 1626454839, 1626454845, 1626454846, 1626454850, 1626454851, 1626454851, 1626454852, 1626454852, 1626454853, 1626454853, 1626454854, 1626454854, 1626454854, 1626454854, 1626454855, 1626454855, 1626454855, 1626454855, 1626454856, 1626454856, 1626454856, 1626454857, 1626454857, 1626454858, 1626454859, 1626454863, 1626454872, 1626454879, 1626454884, 1626454915, 1626454920, 1626454944, 1626454947, 1626454953, 1626454957, 1626454969, 1626454969, 1626454970, 1626454970, 1626454973, 1626454974, 1626454976, 1626454979, 1626454979, 1626454979, 1626454980, 1626454981, 1626454982, 1626454983, 1626454983, 1626454985, 1626454986, 1626454986, 1626454987, 1626454987, 1626454989, 1626454990, 1626454991, 1626454993, 1626454993, 1626454994, 1626454995, 1626454995, 1626454995, 1626454995, 1626454995, 1626454995, 1626454996, 1626454996, 1626454996, 1626454996, 1626454997, 1626454997, 1626454997, 1626454997, 1626454999, 1626454999, 1626455001, 1626455001, 1626455001, 1626455002, 1626455066, 1626455069, 1626455071, 1626455077, 1626455077, 1626455078, 1626455079, 1626455079, 1626455080, 1626455088, 1626455104, 1626455107, 1626455113, 1626455131, 1626455164, 1626455166, 1626455170, 1626455191, 1626455194, 1626455202, 1626455202, 1626455203, 1626455208, 1626455209, 1626455209, 1626455212, 1626455213, 1626455213, 1626455215, 1626455215, 1626455216, 1626455216, 1626455216, 1626455216, 1626455217, 1626455217, 1626455218, 1626455218, 1626455218, 1626455220, 1626455220, 1626455220, 1626455221, 1626455221, 1626455221, 1626455221, 1626455222, 1626455222, 1626455222, 1626455222, 1626455222, 1626455223, 1626455223, 1626455223, 1626455223, 1626455224, 1626455224, 1626455224, 1626455224, 1626455224, 1626455225, 1626455225, 1626455225, 1626455227, 1626455230, 1626455231, 1626455231, 1626455231, 1626455232, 1626455233, 1626455234, 1626455235, 1626455235, 1626455236, 1626455237, 1626455239, 1626455239, 1626455239, 1626455242, 1626455243, 1626455243, 1626455244, 1626455245, 1626455247, 1626455247, 1626455248, 1626455248, 1626455248, 1626455248, 1626455248, 1626455249, 1626455249, 1626455251, 1626455252, 1626455253, 1626455253, 1626455254, 1626455254, 1626455254, 1626455257, 1626455266, 1626455266, 1626455266, 1626455269, 1626455269, 1626455273, 1626455274, 1626455278, 1626455278, 1626455281, 1626455282, 1626455282, 1626455284, 1626455285, 1626455285, 1626455285, 1626455293, 1626455293, 1626455294, 1626455295, 1626455334, 1626455341, 1626455365, 1626455365, 1626455365, 1626455379, 1626455384, 1626455386, 1626455390, 1626455391, 1626455391, 1626455395, 1626455397, 1626455399, 1626455407, 1626455413, 1626455414, 1626455415, 1626455415, 1626455428, 1626455430, 1626455435, 1626455442, 1626455443, 1626455467, 1626455481, 1626455482, 1626455492, 1626455493, 1626455493, 1626455500, 1626455508, 1626455510, 1626455511, 1626455511, 1626455514, 1626455520, 1626455521, 1626455526, 1626455527, 1626455532, 1626455534, 1626455535, 1626455535, 1626455536, 1626455537, 1626455540, 1626455543, 1626455543, 1626455544, 1626455545, 1626455545, 1626455546, 1626455546, 1626455547, 1626455547, 1626455553, 1626455554, 1626455555, 1626455558, 1626455560, 1626455563, 1626455563, 1626455563, 1626455564, 1626455566, 1626455567, 1626455569, 1626455571, 1626455572, 1626455574, 1626455575, 1626455576, 1626455577, 1626455580, 1626455586, 1626455587, 1626455589, 1626455590, 1626455592, 1626455593, 1626455593, 1626455594, 1626455594, 1626455597, 1626455597, 1626455598, 1626455600, 1626455600, 1626455600, 1626455601, 1626455602, 1626455603, 1626455605, 1626455605, 1626455608, 1626455608, 1626455614, 1626455615, 1626455616, 1626455625, 1626455627, 1626455628, 1626455632, 1626455633, 1626455638, 1626455645, 1626455647, 1626455651, 1626455651, 1626455656, 1626455658, 1626455660, 1626455660, 1626455662, 1626455666, 1626455672, 1626455672, 1626455672, 1626455673, 1626455677, 1626455678, 1626455679, 1626455687, 1626455691, 1626455699, 1626455706, 1626455708, 1626455711, 1626455713, 1626455715, 1626455726, 1626455732, 1626455732, 1626455741, 1626455747, 1626455750, 1626455751, 1626455753, 1626455754, 1626455756, 1626455756, 1626455758, 1626455758, 1626455759, 1626455759, 1626455760, 1626455761, 1626455763, 1626455763, 1626455763, 1626455764, 1626455765, 1626455766, 1626455767, 1626455768, 1626455770, 1626455771, 1626455780, 1626455786, 1626455788, 1626455798, 1626455827, 1626455837, 1626455848, 1626455856, 1626455869, 1626455870, 1626455870, 1626455877, 1626455879, 1626455879, 1626455881, 1626455888, 1626455890, 1626455891, 1626455891, 1626455892, 1626455892, 1626455892, 1626455894, 1626455895, 1626455898, 1626455899, 1626455899, 1626455900, 1626455900, 1626455900, 1626455903, 1626455903, 1626455905, 1626455908, 1626455910, 1626455913, 1626455914, 1626455914, 1626455916, 1626455919, 1626455920, 1626455921, 1626455921, 1626455950, 1626455953, 1626455969, 1626455974, 1626455977, 1626455982, 1626455985, 1626455986, 1626455987, 1626455990, 1626455991, 1626455991, 1626455993, 1626455993, 1626455996, 1626456003, 1626456008, 1626456014, 1626456018, 1626456027, 1626456108, 1626456114, 1626456117, 1626456121, 1626456122, 1626456131, 1626456137, 1626456138, 1626456142, 1626456143, 1626456143, 1626456144, 1626456148, 1626456156, 1626456157, 1626456158, 1626456164, 1626456176, 1626456181, 1626456182, 1626456186, 1626456191, 1626456191, 1626456192, 1626456193, 1626456196, 1626456196, 1626456216, 1626456310, 1626456310, 1626456315, 1626456317, 1626456319, 1626456320, 1626456325, 1626456330, 1626456331, 1626456333, 1626456334, 1626456335, 1626456335, 1626456335, 1626456335, 1626456335, 1626456336, 1626456346, 1626456353, 1626456463, 1626456471, 1626456516, 1626456517, 1626456517, 1626456518, 1626456519, 1626456520, 1626456520, 1626456525, 1626456528, 1626456568, 1626456568, 1626456584, 1626456585, 1626456592, 1626456592, 1626456600, 1626456604, 1626456639, 1626456658, 1626456699, 1626456699, 1626456702, 1626456709, 1626456711, 1626456712, 1626456713, 1626456767, 1626456777, 1626456834, 1626456942, 1626456945, 1626456946, 1626456953, 1626456955, 1626456957, 1626456959, 1626456961, 1626456962, 1626456967, 1626456968, 1626456973, 1626456978, 1626456984, 1626456986, 1626456987, 1626456988, 1626457033, 1626457045, 1626457046, 1626457052, 1626457055, 1626457055, 1626457056, 1626457058, 1626457061, 1626457062, 1626457238, 1626457278, 1626457279, 1626457280, 1626457281, 1626457281, 1626457282, 1626457282, 1626457283, 1626457283, 1626457284, 1626457286, 1626457287, 1626457287, 1626457290, 1626457290, 1626457291, 1626457291, 1626457292, 1626457292, 1626457292, 1626457293, 1626457293, 1626457293, 1626457294, 1626457294, 1626457295, 1626457296, 1626457296, 1626457297, 1626457298, 1626457299, 1626457300, 1626457301, 1626457303, 1626457304, 1626457329, 1626457522, 1626457569, 1626457593, 1626457629, 1626457630, 1626457631, 1626457632, 1626457633, 1626457634, 1626457634, 1626457652, 1626457652, 1626457653, 1626457657, 1626457659, 1626457662, 1626457664, 1626457670, 1626457670, 1626457670, 1626457675, 1626457678, 1626457721, 1626457811, 1626457822, 1626457829, 1626457839, 1626457845, 1626457849, 1626457875, 1626457879, 1626457883, 1626457915, 1626458033, 1626458063, 1626458064, 1626458071, 1626458106, 1626458150, 1626458151, 1626458173, 1626458183, 1626458347, 1626458355, 1626458382, 1626458383, 1626458391, 1626458393, 1626458411, 1626458411, 1626458411, 1626458413, 1626458416, 1626458423, 1626458426, 1626458427, 1626458539, 1626458575, 1626458576, 1626458586, 1626458597, 1626458602, 1626458631, 1626458632, 1626458715, 1626458717, 1626458722, 1626458722, 1626458723, 1626458725, 1626458726, 1626458730, 1626458731, 1626458732, 1626458732, 1626458734, 1626458734, 1626458734, 1626458739, 1626458739, 1626458740, 1626458740, 1626458741, 1626458741, 1626458744, 1626458744, 1626458745, 1626458746, 1626458792, 1626458873, 1626458900, 1626459008, 1626459099, 1626459100, 1626459101, 1626459103, 1626459104, 1626459112, 1626459119, 1626459122, 1626459123, 1626459125, 1626459126, 1626459127, 1626459129, 1626459129, 1626459130, 1626459131, 1626459132, 1626459133, 1626459133, 1626459135, 1626459137, 1626459137, 1626459138, 1626459139, 1626459140, 1626459142, 1626459157, 1626459370, 1626459374, 1626459376, 1626459377, 1626459378, 1626459378, 1626459379, 1626459380, 1626459381, 1626459381, 1626459381, 1626459388, 1626459390, 1626459391, 1626459396, 1626459398, 1626459400, 1626459401, 1626459404, 1626459404, 1626459406, 1626459408, 1626459408, 1626459411, 1626459418, 1626459418, 1626459420, 1626459422, 1626459422, 1626459423, 1626459424, 1626459425, 1626459426, 1626459426, 1626459432, 1626459432, 1626459432, 1626459439, 1626459441, 1626459447, 1626459451, 1626459861, 1626459882, 1626459900, 1626459909, 1626459910, 1626460049, 1626460050, 1626460053, 1626460057, 1626460187, 1626460343, 1626460344, 1626460344, 1626460353, 1626460356, 1626460397, 1626460440, 1626460449, 1626460475, 1626460475, 1626460480, 1626460480, 1626460509, 1626460515, 1626460515, 1626460518, 1626460521, 1626460522, 1626460522, 1626460563, 1626460582, 1626460582, 1626460628, 1626460636, 1626460811, 1626460883, 1626460956, 1626461092, 1626461113, 1626461118, 1626461143, 1626461145, 1626461219, 1626461383, 1626461424, 1626461424, 1626461430, 1626461434, 1626461643, 1626461649, 1626461650, 1626461658, 1626461722, 1626461762, 1626461795, 1626461813, 1626461958, 1626461982, 1626462017, 1626462023, 1626462058, 1626462086, 1626462090, 1626462096, 1626462113, 1626462124, 1626462132, 1626462306, 1626462347, 1626462353, 1626462373, 1626462513, 1626462595, 1626462598, 1626462626, 1626462782, 1626462806, 1626462807, 1626462811, 1626462911, 1626463000, 1626463002, 1626463111, 1626463132, 1626463172, 1626463195, 1626463246, 1626463282, 1626463382, 1626463394, 1626463482, 1626463482, 1626463504, 1626463509, 1626463511, 1626463519, 1626463734, 1626463748, 1626463752, 1626463776, 1626463781, 1626463896, 1626463899, 1626463906, 1626463906, 1626463913, 1626463916, 1626463929, 1626463936, 1626463946, 1626463964, 1626463993, 1626464009, 1626464037, 1626464037, 1626464047, 1626464067, 1626464068, 1626464069, 1626464077, 1626464100, 1626464208, 1626464232, 1626464271, 1626464297, 1626464303, 1626464330, 1626464342, 1626464343, 1626464383, 1626464401, 1626464431, 1626464551, 1626464577, 1626464630, 1626464727, 1626464780, 1626464850, 1626464934, 1626464938, 1626464938, 1626464976, 1626465019, 1626465082, 1626465089, 1626465098, 1626465155, 1626465270, 1626465310, 1626465328, 1626465331, 1626465368, 1626465507, 1626465614, 1626465617, 1626465620, 1626465640, 1626465737, 1626465770, 1626465836, 1626465849, 1626465933, 1626465935, 1626465935, 1626465968, 1626466060, 1626466080, 1626466147, 1626466151, 1626466157, 1626466198, 1626466207, 1626466323, 1626466333, 1626466361, 1626466547, 1626466600, 1626466676, 1626466711, 1626466827, 1626466894, 1626466898, 1626466992, 1626467093, 1626467106, 1626467172, 1626467202, 1626467210, 1626467286, 1626467293, 1626467319, 1626467359, 1626467364, 1626467458, 1626467510, 1626467523, 1626467525, 1626467620, 1626467747, 1626467824, 1626467966, 1626468033, 1626468077, 1626468205, 1626468248, 1626468276, 1626468308, 1626468475, 1626468525, 1626468613, 1626468678, 1626468711, 1626469223, 1626469354, 1626469354, 1626469384, 1626469464, 1626469741, 1626469843, 1626469868, 1626469883, 1626469916, 1626470198, 1626470433, 1626470756, 1626470802, 1626470863, 1626471234, 1626471553, 1626471727, 1626471770, 1626471954, 1626472091, 1626472189, 1626472336, 1626472389, 1626472600, 1626472608, 1626472737, 1626472930, 1626473040, 1626473550, 1626473692, 1626473767, 1626473974, 1626474006, 1626474059, 1626474993, 1626475563, 1626475843, 1626475918, 1626475948, 1626476003, 1626476006, 1626476075, 1626476417, 1626477464, 1626477548, 1626477696, 1626477728, 1626477902, 1626478005, 1626478343, 1626478852, 1626478973, 1626479275, 1626479405, 1626480168, 1626480816, 1626480904, 1626480969, 1626481202, 1626481385, 1626481408, 1626481951, 1626482100, 1626482889, 1626484109, 1626484244, 1626484252, 1626484298, 1626485201, 1626485565, 1626486195, 1626487300, 1626488664, 1626489312, 1626489723, 1626489982, 1626490239, 1626491160, 1626491514, 1626492405, 1626493210, 1626494340, 1626494860, 1626497004, 1626497606, 1626499661, 1626500083, 1626500288, 1626501188, 1626501895, 1626504601, 1626505607, 1626507122, 1626507208, 1626507327, 1626508336, 1626509511, 1626509568, 1626511765, 1626511861, 1626511910, 1626512881, 1626514090, 1626514121, 1626514227, 1626514364, 1626515345, 1626516205, 1626516300, 1626516629, 1626517569, 1626517863, 1626519096, 1626519096, 1626519418, 1626520448, 1626520727, 1626521135, 1626521254, 1626521669, 1626521921, 1626522031, 1626522356, 1626523340, 1626523474, 1626523766, 1626525803, 1626525912, 1626529455, 1626530685, 1626532148, 1626532857, 1626534158, 1626534358, 1626534743, 1626535247, 1626536084, 1626539222, 1626542067, 1626544097, 1626545040, 1626546650, 1626547572, 1626548312, 1626549936, 1626550706, 1626552878, 1626553587, 1626553967, 1626554069, 1626554854, 1626554988, 1626555144, 1626556407, 1626556597, 1626557759, 1626558981, 1626559150, 1626561824, 1626562407, 1626562407, 1626564066, 1626565248, 1626565543, 1626569204, 1626574932, 1626577467, 1626578845, 1626578845, 1626583537, 1626584774, 1626586385, 1626588021, 1626594248, 1626594365, 1626596688, 1626597122, 1626598418, 1626598815, 1626598857, 1626599146, 1626599146, 1626599550, 1626600971, 1626600991, 1626602814, 1626603925, 1626604920, 1626605958, 1626614714, 1626616293, 1626618837, 1626620261, 1626620705, 1626621537, 1626623812, 1626625347, 1626625986, 1626627380, 1626628744, 1626629912, 1626630783, 1626631838, 1626632609, 1626634386, 1626636063, 1626637061, 1626637229, 1626637911, 1626640944, 1626641055, 1626643334, 1626645330, 1626645919, 1626650423, 1626651205, 1626652239, 1626652568, 1626653972, 1626659079, 1626662078, 1626666658, 1626667157, 1626669931, 1626671371, 1626672731, 1626684757, 1626687162, 1626688535, 1626691987, 1626694668, 1626695045, 1626696506, 1626696528, 1626699457, 1626700382, 1626703924, 1626710738, 1626722945, 1626729314, 1626730000, 1626731217, 1626731999, 1626734176, 1626735110, 1626742940, 1626752401, 1626753400, 1626761255, 1626775711, 1626784709, 1626785181, 1626788131, 1626789714, 1626791465, 1626792687, 1626797195, 1626797544, 1626798704, 1626807455, 1626813936, 1626817587, 1626818082, 1626822214, 1626824276, 1626831032, 1626831189, 1626844333, 1626869977, 1626873200, 1626875326, 1626890551, 1626892014, 1626903616, 1626923284, 1626924402, 1626942652, 1626951777, 1626972785, 1626980766, 1626981937, 1626990791, 1626992268, 1626997301, 1627021864, 1627046903, 1627060044, 1627064716, 1627066484, 1627071241, 1627071365, 1627073255, 1627077452, 1627087753, 1627132118, 1627157965, 1627174937, 1627221114, 1627223011, 1627245255, 1627332044, 1627349983, 1627406912, 1627416606, 1627429546, 1627581860, 1627638226, 1627664516, 1627692668, 1627752061, 1627765397, 1628018878, 1628122951, 1628277444, 1628286911, 1628435849, 1628706065, 1628852789, 1629229045, 1629450311, 1630187488, 1630730766, 1630786785, 1631818019, 1631840071, 1632214742, 1632346652, 1632437687, 1632449257, 1632469187, 1632505882, 1632588177, 1633250664, 1633357748, 1633533968, 1633608596, 1633796397, 1633798567, 1633804336, 1634779945, 1635004121, 1635204407, 1635467281, 1635539885, 1635800689, 1635808860, 1636133801, 1636520404, 1636606032, 1636611359, 1636828992, 1638839105, 1639757954, 1641582569, 1642008351, 1642231636, 1642706127,1646464373];
dregions
allDataPoints = dtimes.length;

models = dmodels;
quarters = dquarters;
times = dtimes;
regions = dregions;

// reset arrays to default
models = [...dmodels];
quarters = [...dquarters];
times = [...dtimes];
regions = [...dregions];

function removeValue(x)
{
    //models.pop(x);
    //quarters.pop(x);
    //regions.pop(x);
    //times.pop(x);
    // moodels
    models.splice(x, 1);
    // quarters
    quarters.splice(x, 1);
    // regions
    regions.splice(x, 1); 
    // times
    times.splice(x, 1);

    //console.log("Removing: ", x)
}

function filtration(filterList, filterCondition)
{
    x = 0;
    console.log("Filtration List: ", filterList.length)
    while ( x < filterList.length)
    {
        //console.log("Evaluating item: ", filterList[x], ", ", x)
        if (filterList[x] != filterCondition) removeValue(x);
        else x += 1;
        x++;
    }
}
    

function CalculateResult(form)
{
    models = [...dmodels];
    quarters = [...dquarters];
    times = [...dtimes];
    regions = [...dregions];

    userRegion = ""

    RegionUS = document.querySelector('#RegionUS').checked;
    RegionEU = document.querySelector('#RegionEU').checked;
    RegionUK = document.querySelector('#RegionUK').checked;

    if (RegionUS && RegionEU && RegionUK)
    {
        userRegion = "ALL"
    }
    else if (RegionUS && RegionEU) { console.error("Either select All regions or specific one"); alert("Either select All regions or specific one");}
    else if (RegionUS && RegionUK) { console.error("Either select All regions or specific one"); alert("Either select All regions or specific one");}
    else if (RegionEU && RegionUS) { console.error("Either select All regions or specific one"); alert("Either select All regions or specific one");}
    else if (RegionEU && RegionUK) { console.error("Either select All regions or specific one"); alert("Either select All regions or specific one");}
    else if (RegionUK && RegionUS) { console.error("Either select All regions or specific one"); alert("Either select All regions or specific one");}
    else if (RegionUK && RegionEU) { console.error("Either select All regions or specific one"); alert("Either select All regions or specific one");}

    else if (RegionUS) userRegion = "US";
    else if (RegionEU) userRegion = "EU";
    else if (RegionUK) userRegion = "UK";

    if (form.Quarter.value == "") {console.error("Error: Quarter is null!"); return;}
    if (form.Model.value == "") {console.error("Error: Model is null!"); return;}

    if (userRegion == "") {console.error("Error: Region cannot be blank!"); alert("You must select a region!"); return;}

    userQuarter = form.Quarter.value;
    userModel = form.Model.value;
    timeStamp = form.ReservedTime.value;

    filtration(models, userModel);
    filtration(quarters, userQuarter);

    if (userRegion != "ALL") { console.log("Filtering based on region:", userRegion); filtration(regions, userRegion);}

    if(userQuarter == "Q1") {daysInQuarter = 34}
    else if(userQuarter == "Q2") {daysInQuarter = 91}
    else {daysInQuarter = 62}


    userQueuePos = 1;

    x = 0;
    while(x < times.length)
    {
        //console.log("Evaluating: ", times[x], ",  ", timeStamp, " = ", timeStamp >= times[x])
        if (timeStamp >= times[x])
        {
            userQueuePos = (x + 2)
          //  console.info("Running for loop", times.length)
        }
        //console.log("loop ran ", x, "times")
        x++
    }
    console.log("times.length: ", times.length)
    console.log("daysInQuarter: ", daysInQuarter)
    console.log("userQueuePos: ", userQueuePos)

    answer = daysInQuarter / (times.length + 1);
    console.log("answer: ", answer)
    userDate1 = answer * userQueuePos
    console.log("userDate1: ", userDate1)
    userDate = Math.ceil(userDate1);
    console.log("userDate: ", userDate)

    EstMonth = "";
    EstDay = "";

    if (userQuarter == "Q1")
    {
        if (userDate <= 3) { EstMonth = "February"; EstDay = (userDate + 25)}
        else {EstMonth = "March"; EstDay = (userDate-3) }
    }
        
    else if (userQuarter == "Q2")
    {
        if (userDate <= 30) { EstMonth = "April"; EstDay = userDate}
        else if (userDate <= 61)
        {EstMonth = "May"; EstDay = userDate-30;}
        else { EstMonth = "June"; EstDay = (userDate-61)}
    }

    else
    {
        if (userDate <= 31) { EstMonth = "July"; EstDay = userDate}
        else { EstMonth = "August"; EstDay = (userDate-31)}
    }
        
            
    header = document.querySelector("#pd");
    header.innerText = "My estimated date is: " + EstDay + " " + EstMonth;
    header.style.visibility = 'visible';
    

    console.log("Calculated from" , times.length , "data points out of a possible" , allDataPoints , "data points")
    console.log("User details")
    console.log("(Don't worry, these are totally safe to include in a screenshot of your result. It just makes it a lot easier for me to fix something if somebody gets an oddball result.)")
    console.log("Region:" , userRegion)
    console.log("Model:" , userModel)
    console.log("Quarter:" , userQuarter)
    console.log("Timestamp:" , timeStamp)

}